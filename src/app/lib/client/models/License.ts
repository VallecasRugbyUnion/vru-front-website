/* tslint:disable */
/* eslint-disable */
/**
 * backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SimpleSeason } from './SimpleSeason';
import { SimpleSeasonFromJSON, SimpleSeasonFromJSONTyped, SimpleSeasonToJSON } from './SimpleSeason';

/**
 *
 * @export
 * @interface License
 */
export interface License {
  /**
   *
   * @type {string}
   * @memberof License
   */
  uuid: string;
  /**
   * Número de licencia.
   * @type {number}
   * @memberof License
   */
  number: number;
  /**
   *
   * @type {SimpleSeason}
   * @memberof License
   */
  season: SimpleSeason;
  /**
   * Estado de la licencia.
   * @type {string}
   * @memberof License
   */
  status?: string;
  /**
   * Club de la licencia.
   * @type {string}
   * @memberof License
   */
  club?: string | null;
  /**
   * Subcategoría de la licencia.
   * @type {string}
   * @memberof License
   */
  subcategory?: string | null;
  /**
   * Categoría de la licencia.
   * @type {string}
   * @memberof License
   */
  category?: string | null;
  /**
   * Modalidad de la licencia.
   * @type {string}
   * @memberof License
   */
  modality?: string | null;
  /**
   * Fecha de tramitación de la licencia.
   * @type {Date}
   * @memberof License
   */
  processingDate?: Date | null;
  /**
   * Fecha de anulación de la licencia.
   * @type {Date}
   * @memberof License
   */
  annulationDate?: Date | null;
}

/**
 * Check if a given object implements the License interface.
 */
export function instanceOfLicense(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'uuid' in value;
  isInstance = isInstance && 'number' in value;
  isInstance = isInstance && 'season' in value;

  return isInstance;
}

export function LicenseFromJSON(json: any): License {
  return LicenseFromJSONTyped(json, false);
}

export function LicenseFromJSONTyped(json: any, ignoreDiscriminator: boolean): License {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    uuid: json['uuid'],
    number: json['number'],
    season: SimpleSeasonFromJSON(json['season']),
    status: !exists(json, 'status') ? undefined : json['status'],
    club: !exists(json, 'club') ? undefined : json['club'],
    subcategory: !exists(json, 'subcategory') ? undefined : json['subcategory'],
    category: !exists(json, 'category') ? undefined : json['category'],
    modality: !exists(json, 'modality') ? undefined : json['modality'],
    processingDate: !exists(json, 'processing_date')
      ? undefined
      : json['processing_date'] === null
        ? null
        : new Date(json['processing_date']),
    annulationDate: !exists(json, 'annulation_date')
      ? undefined
      : json['annulation_date'] === null
        ? null
        : new Date(json['annulation_date']),
  };
}

export function LicenseToJSON(value?: License | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    uuid: value.uuid,
    number: value.number,
    season: SimpleSeasonToJSON(value.season),
    status: value.status,
    club: value.club,
    subcategory: value.subcategory,
    category: value.category,
    modality: value.modality,
    processing_date:
      value.processingDate === undefined
        ? undefined
        : value.processingDate === null
          ? null
          : value.processingDate.toISOString().substring(0, 10),
    annulation_date:
      value.annulationDate === undefined
        ? undefined
        : value.annulationDate === null
          ? null
          : value.annulationDate.toISOString().substring(0, 10),
  };
}
